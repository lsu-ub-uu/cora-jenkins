pipeline {
   	agent any
   	environment {
        CHECKED_IN = "";
    }

    parameters {
        string( name: 'UB_PROJECT_NAME', 
            defaultValue: 'cora-testrelease-a', 
            description: 'Name of the project to build')
        string( name: 'UB_BRANCH_NAME', 
            defaultValue: 'master', 
            description: 'Name of the branch to build')
        string( name: 'FORCE_RELEASE', 
            defaultValue: "0", 
            description: 'Wheter the project has to be build even no dependencies chages have been found. Force release = 1, otherwise 0')
    }
    tools {
        jdk 'Cora OpenJDK'
        maven 'Maven latest'
    }
    stages {
        stage("checkout"){
            steps{
            	echo "Project: ${UB_PROJECT_NAME}"
            	echo "FORCE_RELEASE: ${FORCE_RELEASE}"
                withCredentials([string(credentialsId: '9af4f5c5-4a09-4bbe-9436-2c102765d85b', variable: 'GITHUB_TOKEN'),string(credentialsId: '04bc33f5-abdd-4486-b43b-a5900f6fc080', variable: 'GITHUB_USERNAME')]) {
                    sh 'git clone https://$GITHUB_TOKEN@github.com/lsu-ub-uu/$UB_PROJECT_NAME.git $UB_PROJECT_NAME -b $UB_BRANCH_NAME'
                }
            }
        }
        stage("update dependencies"){
		 environment {
                GITHUB_USERNAME = credentials('04bc33f5-abdd-4486-b43b-a5900f6fc080')
                GITHUB_TOKEN = credentials('9af4f5c5-4a09-4bbe-9436-2c102765d85b')
                MVN_MAJOR_VERSION = sh(script: "mvn -f $UB_PROJECT_NAME build-helper:parse-version help:evaluate -Dexpression=parsedVersion.majorVersion -q -DforceStdout", returnStdout: true)
                MVN_MINOR_VERSION = sh(script: "mvn -f $UB_PROJECT_NAME build-helper:parse-version help:evaluate -Dexpression=parsedVersion.minorVersion -q -DforceStdout", returnStdout: true)
                MVN_NEXT_MAJOR_VERSION = sh(script: "mvn -f $UB_PROJECT_NAME build-helper:parse-version help:evaluate -Dexpression=parsedVersion.nextMajorVersion -q -DforceStdout", returnStdout: true)
                MVN_NEXT_MINOR_VERSION = sh(script: "mvn -f $UB_PROJECT_NAME build-helper:parse-version help:evaluate -Dexpression=parsedVersion.nextMinorVersion -q -DforceStdout", returnStdout: true) 
                BRANCH_VERSION="$MVN_MAJOR_VERSION.$MVN_MINOR_VERSION"
                DEV_BRANCH_VERSION="$MVN_MAJOR_VERSION.$MVN_NEXT_MINOR_VERSION"
            }
            steps {
            	echo "Branch version:$BRANCH_VERSION"
                echo "Dev branch version:$DEV_BRANCH_VERSION"
           
	           	sh 'mvn -f $UB_PROJECT_NAME \
	           	 -DgenerateBackupPoms=false \
	           	 -Dmaven.version.rules="https://raw.github.com/lsu-ub-uu/cora-jenkins/master/maven/maven-version-rules.xml" \
	           	 -Dusername=$GITHUB_USERNAME \
	           	 -Dpassword=$GITHUB_TOKEN \
	           	 -DbranchName=release/$BRANCH_VERSION \
	           	 -DupdateBranchVersions=true \
	           	 -DcheckModificationExcludeList=**\\pom.xml \
	           	 -DreleaseVersion=$BRANCH_VERSION.0-SNAPSHOT \
	           	 -DupdateWorkingCopyVersions=true \
	           	 -DdevelopmentVersion=$DEV_BRANCH_VERSION-SNAPSHOT \
	           	 -Darguments="-Dmaven.javadoc.skip=true" \
	           	 -Dresume=false \
	           	 -DpushChanges=false \
	           	 -DpreparationGoals=initialize \
	           	 -DlocalCheckout=true \
	           	 versions:update-parent \
	           	 versions:update-properties \
	           	 release:branch \
	           	 release:prepare \
	           	 release:perform' 
           }
        }
        stage("commit and push to git"){
            steps {
            	dir ("$UB_PROJECT_NAME") {
 	                sh 'git config user.email "jenkins@ub"'
 	                sh 'git config user.name "Jenkins CI"'
 	                sh 'git commit -m="Commit form jenkins"'
 	                sh 'git push'
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}