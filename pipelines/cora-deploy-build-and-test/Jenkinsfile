def getRecipients() {
   def recipients = "${env.CORA_MAIL_LIST}"
   if (params.APPLICATION_NAME == 'systemone') {
      recipients += ",${env.DIVA_MAIL_LIST}"
      recipients += ",${env.ALVIN_MAIL_LIST}"
   }
   if (params.APPLICATION_NAME == 'diva') {
      recipients += ",${env.DIVA_MAIL_LIST}"
   }
   if (params.APPLICATION_NAME == 'alvin') {
      recipients += ",${env.ALVIN_MAIL_LIST}"
   }
   return recipients
}

def writeStatus(String applicationName, String status) {
    def statusFile = "${env.BASE_PATH_STATUS}/${applicationName}.status"
    sh """
        echo "${status}" > ${statusFile}
    """
}

def readStatus(String applicationName) {
    def statusFile = "${env.BASE_PATH_STATUS}/${applicationName}.status"
    return sh(
        script: "[ -f ${statusFile} ] && cat ${statusFile} || echo 'unknown'",
        returnStdout: true
    ).trim()
}


pipeline {
   agent {
      label 'minikube'
   }
   
   environment {
      HELM_REPO_NAME = "cora-deployment"
      BASE_PATH_STATUS = "/home/jenkins/custom/status"
   }
   
   parameters {
      choice(
      name: 'APPLICATION_NAME',
      choices: ['systemone', 'alvin', 'diva'],
      description: 'Name of the application that Helm chart will be updated'
      )
   }
   
   stages {
      stage('Initialize') {
         steps {
            script {
               // Set display name and description in Jenkins GUI
               currentBuild.displayName = "#${env.BUILD_NUMBER} - ${params.APPLICATION_NAME}"
               currentBuild.description = "Application Name: ${params.APPLICATION_NAME}"
               
               // Also log it in the console output
               echo ">>> APPLICATION_NAME: ${params.APPLICATION_NAME}"
            }
         }
      }
      
      stage('clone cora-deployment') {
         steps {
            script {
               withCredentials([
               string(credentialsId: '9af4f5c5-4a09-4bbe-9436-2c102765d85b', variable: 'TOKEN'),
               string(credentialsId: '04bc33f5-abdd-4486-b43b-a5900f6fc080', variable: 'USERNAME')
               ]) {
                  sh '''
                  rm -rf "$HELM_REPO_NAME"
                  git clone https://$USERNAME:$TOKEN@github.com/lsu-ub-uu/$HELM_REPO_NAME.git "$HELM_REPO_NAME"
                  '''
               }
            }
         }
      }
      
      stage('Deploy to build') {
         steps {
            sh './helm/deploy-system-to-build.sh $APPLICATION_NAME'
         }
      }
      
      stage('Run Fitnesse tests') {
         steps {
            build job: "${params.APPLICATION_NAME}-fitnesse-test",
            wait: true,
            parameters: [
            string(name: 'APPLICATION_NAME', value: "${params.APPLICATION_NAME}"),
            string(name: 'UPSTREAM_JOB_NAME', value: env.JOB_NAME),
            string(name: 'UPSTREAM_BUILD_NUMBER', value: env.BUILD_NUMBER.toString())
            ]
         }
      }
      stage('Run Playwright tests') {
         when {
            expression {
               return params.APPLICATION_NAME == 'diva'
            }
         }
         steps {
            build job: "diva-playwright-test",
            wait: true,
            parameters: [
            string(name: 'UPSTREAM_JOB_NAME', value: env.JOB_NAME),
            string(name: 'UPSTREAM_BUILD_NUMBER', value: env.BUILD_NUMBER.toString())
            ]
         }
      }
      
      stage('Push helm to nexus repository') {
         steps {
            build job: "cora-helm-chart-push",
            wait: true,
            parameters: [
            string(name: 'APPLICATION_NAME', value: "${params.APPLICATION_NAME}"),
            string(name: 'UPSTREAM_JOB_NAME', value: env.JOB_NAME),
            string(name: 'UPSTREAM_BUILD_NUMBER', value: env.BUILD_NUMBER.toString())
            ]
         }
      }
   }
   post {
      success {
         echo 'Acceptance test: OK, helm version ready for deployment!'
         script {
             def previousStatus = readStatus(params.APPLICATION_NAME)
             echo "Previous status for ${params.APPLICATION_NAME}: ${previousStatus}"
             if (previousStatus != "ok") {
                 def subject = "${params.APPLICATION_NAME} is BACK TO NORMAL: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
                 def body = "${params.APPLICATION_NAME} build to preview is back to normal:\n\n${env.BUILD_URL}"

                 mail to: getRecipients(),
                 subject: subject,
                 body: body
             }
            
            writeStatus(params.APPLICATION_NAME, "ok")
            setStatus("ok")
            echo 'Acceptance test: OK, helm version ready for deployment!'
         }
      }
      unstable {
         script {
            writeStatus(params.APPLICATION_NAME, "unstable")
            
            def subject = "${params.APPLICATION_NAME} acceptance tests FAILED!: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
            def body = "Check Jenkins for details: ${env.BUILD_URL}"
            
            mail to: getRecipients(),
            subject: subject,
            body: body
            
         }
         echo 'Acceptance test: UNSTABLE, helm version not accepted for deployment! Please check the failures.'
      }
      failure {
         script {
            writeStatus(params.APPLICATION_NAME, "failed")
            
            def subject = "${params.APPLICATION_NAME} acceptance tests FAILED!: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
            def body = "Check Jenkins for details: ${env.BUILD_URL}"
            
            mail to: getRecipients(),
            subject: subject,
            body: body
         }
         echo 'Acceptance test: FAILED, helm version not accepted for deployment! Please check the failures.'
      }
      
      always {
         cleanWs()
      }
   }
}