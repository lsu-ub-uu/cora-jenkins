/* This Jenkins pipeline automates the process of updating a Helm chart with the latest Docker image versions for a specified application (systemone, alvin, or diva). It performs the following steps:
*    1. Validate Input: Ensures the APPLICATION_NAME is one of the allowed applications.
*    2. Determine Docker Versions: Queries a Maven repository to fetch the latest versions of the relevant Docker artifacts.
*    3. Clone Repository: Clones the Helm chart repository (cora-deployment) from GitHub.
*    4. Update Helm Values: Edits the values.yaml file to reference the latest Docker image versions.
*    5. Bump Chart Version: Increments the version number in the Helm Chart.yaml file.
*    6. Commit Changes: Commits and pushes the updated Helm chart files to the GitHub repository.
*    Trigger Deployment: On successful build, triggers a separate deployment job for the specified application.
* Temporary files are cleaned up after the build, and outcomes (success or failure) are logged accordingly.
*/
// YAML parsing must be wrapped in @NonCPS to be compatible with Jenkins
import org.yaml.snakeyaml.Yaml
import org.yaml.snakeyaml.DumperOptions
@NonCPS
def parseYaml(String content) {
   def yaml = new org.yaml.snakeyaml.Yaml()
   return yaml.load(content)
}

@NonCPS
def dumpYaml(Object data) {
   def options = new org.yaml.snakeyaml.DumperOptions()
   options.setDefaultFlowStyle(org.yaml.snakeyaml.DumperOptions.FlowStyle.BLOCK)
   options.setIndent(2)
   options.setIndentWithIndicator(true)
   options.setIndicatorIndent(2)
   options.setProcessComments(true)
   def yaml = new org.yaml.snakeyaml.Yaml(options)
   return yaml.dump(data)
}

def hasChanges = false

pipeline {
   agent any
   
   environment {
      HELM_REPO_NAME = "cora-deployment";
   }
   
   parameters {
      string(
      name: 'APPLICATION_NAME',
      defaultValue: 'systemone',
      description: 'Name of the application that Helm chart will be updated'
      )
   }
   stages {
      stage('Initialize') {
         steps {
            script {
               // Set display name and description in Jenkins GUI
               currentBuild.displayName = "#${env.BUILD_NUMBER} - ${params.APPLICATION_NAME}"
               currentBuild.description = "Application Name: ${params.APPLICATION_NAME}"
               
               // Also log it in the console output
               echo ">>> APPLICATION_NAME: ${params.APPLICATION_NAME}"
            }
         }
      }
      stage("Determine Docker Artifacts") {
         steps {
            script {
               // Define allowed apps
               def allowedApps = ["systemone", "alvin", "diva"]
               if (!allowedApps.contains(params.APPLICATION_NAME)) {
                  error("Invalid APPLICATION_NAME '${params.APPLICATION_NAME}'. Must be one of: ${allowedApps.join(', ')}")
               }
               
               // Define Docker image lists
               def coraDockers = [
               "cora-docker-jsclient", "cora-docker-solr", "cora-docker-fedora",
               "cora-docker-rabbitmq", "cora-docker-iipimageserver", "cora-docker-binaryconverter",
               "cora-docker-idplogin", "cora-docker-login", "cora-docker-console"
               ]
               def dockerMap = [
               "systemone": coraDockers + ["systemone-docker-postgresql", "systemone-docker", "systemone-docker-fitnesse", "cora-docker-gatekeeper"],
               "alvin"    : coraDockers + ["alvin-docker-postgresql", "alvin-docker-cora", "alvin-docker-gatekeeper", "alvin-cora-docker-fitnesse"],
               "diva"     : coraDockers + ["diva-docker-postgresql", "diva-cora-docker-fitnesse", "diva-docker-cora", "diva-docker-gatekeeper", "diva-docker-divaclient", "diva-docker-playwright"]
               ]
               
               def getLatestVersion = {
                  groupId, artifactId, repoUrl ->
                  def groupPath = groupId.replace('.', '/')
                  def metadataUrl = "${repoUrl}/${groupPath}/${artifactId}/maven-metadata.xml"
                  echo "Fetching: ${metadataUrl}"
                  
                  def metadata = new XmlSlurper().parse(metadataUrl)
                  def releaseVersion = metadata.versioning.release?.text()
                  
                  if (!releaseVersion) {
                     releaseVersion = "-"
                     echo "Warning: No <release> found for ${artifactId}, using default: ${releaseVersion}"
                  }
                  
                  return releaseVersion
               }
               
               def getLatestVersionByArtifactId = {
                  artifactId ->
                  def groupId = 'se.uu.ub.cora'
                  def repoUrl = 'http://epc.ub.uu.se/nexus/repository/maven-public/'
                  def latestVersion = getLatestVersion(groupId, artifactId, repoUrl)
                  echo "Latest version of ${groupId}:${artifactId} is ${latestVersion}"
                  return latestVersion
               }
               
               // Get relevant docker list
               def dockerList = dockerMap.get(params.APPLICATION_NAME, coraDockers)
               echo "Updating Helm chart for ${params.APPLICATION_NAME}"
               echo "Dockers to step up: ${dockerList.join(', ')}"
               
               // Iterate and resolve versions
               dockerList.each {
                  artifactId ->
                  getLatestVersionByArtifactId(artifactId.trim())
               }
               
               // Map to hold artifact -> version
               def versionsMap = [:]
               dockerList.each {
                  artifactId ->
                  def version = getLatestVersionByArtifactId(artifactId)
                  if(version != "-") {
                     versionsMap[artifactId] = version
                  }
               }
               
               // Save versionsMap to env for next stage or keep in variable
               // Here we keep it in current script scope as you update file in next step
               echo "Versions map: ${versionsMap}"
               
               // Save to file or pass around as needed
               writeFile file: 'versions.json', text: groovy.json.JsonOutput.toJson(versionsMap)
            }
            
         }
      }
      stage("clone") {
         steps {
            script {
               withCredentials([
               string(credentialsId: '9af4f5c5-4a09-4bbe-9436-2c102765d85b', variable: 'TOKEN'),
               string(credentialsId: '04bc33f5-abdd-4486-b43b-a5900f6fc080', variable: 'USERNAME')
               ]) {
                  sh '''
                  rm -rf "$HELM_REPO_NAME"
                  git clone https://$USERNAME:$TOKEN@github.com/lsu-ub-uu/$HELM_REPO_NAME.git "$HELM_REPO_NAME"
                  '''
               }
            }
         }
      }
      
      stage("Update values and chart for helm") {
         steps {
            script {
               def readYamlFile = {
                  pathToFile ->
                  def yamlContent = readFile(pathToFile)
                  return parseYaml(yamlContent)
               }
               
               def readJsonFile = {
                  pathToFile ->
                  def jsonContent = readFile(pathToFile)
                  return new groovy.json.JsonSlurper().parseText(jsonContent)
               }
               //TODO Set APPLICATION_NAME to path
               def pathToValuesYaml = "${env.HELM_REPO_NAME}/helm/${params.APPLICATION_NAME}/values.yaml"
               def yamlData = readYamlFile(pathToValuesYaml)
               def versionsMap = readJsonFile('versions.json')
               
               versionsMap.each {
                  artifactId, version ->
                  // Find key by artifactId suffix
                  def key = null
                  if (artifactId == "cora-docker-solr") key = "solr"
                  else if (artifactId == "cora-docker-rabbitmq") key = "rabbitmq"
                  else if (artifactId == "cora-docker-fedora") key = "fedora"
                  else if (artifactId == "cora-docker-idplogin") key = "idplogin"
                  else if (artifactId == "cora-docker-iipimageserver") key = "iip"
                  else if (artifactId == "cora-docker-binaryconverter") key = "binaryconverter"
                  else if (artifactId == "cora-docker-jsclient") key = "jsclient"
                  else if (artifactId == "cora-docker-login") key = "login"
                  else if (artifactId == "cora-docker-gatekeeper") key = "gatekeeper"
                  else if (artifactId == "cora-docker-console") key = "console"
                  
                  else if (artifactId == "systemone-docker") key = "rest"
                  else if (artifactId == "systemone-docker-postgresql") key = "postgresql"
                  else if (artifactId == "cora-docker-gatekeeper") key = "gatekeeper"
                  else if (artifactId == "systemone-docker-fitnesse") key = "fitnesse"
                  
                  else if (artifactId == "alvin-docker-cora") key = "rest"
                  else if (artifactId == "alvin-docker-postgresql") key = "postgresql"
                  else if (artifactId == "alvin-docker-gatekeeper") key = "gatekeeper"
                  else if (artifactId == "alvin-cora-docker-fitnesse") key = "fitnesse"
                  
                  else if (artifactId == "diva-docker-cora") key = "rest"
                  else if (artifactId == "diva-docker-postgresql") key = "postgresql"
                  else if (artifactId == "diva-docker-gatekeeper") key = "gatekeeper"
                  else if (artifactId == "diva-cora-docker-fitnesse") key = "fitnesse"
                  else if (artifactId == "diva-docker-divaclient") key = "divaclient"
                  else if (artifactId == "diva-docker-playwright") key = "playwright"
                  
                  if (key && yamlData?.docker?.containsKey(key)) {
                     yamlData.docker[key] = "${artifactId}:${version}".toString()
                  }
               }
               
               def newYamlStr = dumpYaml(yamlData)
               writeFile file: pathToValuesYaml, text: newYamlStr
            }
         }
      }
      stage("Check for Changes") {
         steps {
            dir("${env.HELM_REPO_NAME}") {
               script {
                  def changes = sh(script: 'git status --porcelain', returnStdout: true).trim()
                  if (changes) {
                     echo "Changes detected:\n${changes}"
                     hasChanges = true
                  } else {
                     echo "No changes detected. Skipping remaining stages."
                     hasChanges = false
                  }
               }
            }
         }
      }
      
      stage("Bump Chart.yaml Version") {
         when {
            expression {
               return hasChanges
            }
         }
         steps {
            script {
               def readVersion = {
                  versionString ->
                  return versionString.tokenize('.').collect {
                     it.toInteger()
                  }
               }
               
               def bumpVersion = {
                  version ->
                  def (major, minor, patch) = readVersion(version)
                  return "${major}.${minor}.${patch + 1}".toString()
               }
               
               def surroundWithQuotes = {
                  value ->
                  return "\"${value}\""
               }
               
               
               def chartPath = "${env.HELM_REPO_NAME}/helm/${params.APPLICATION_NAME}/Chart.yaml"
               def chartYaml = parseYaml(readFile(chartPath))
               
               chartYaml.version = bumpVersion(chartYaml.version)
               
               def newYaml = dumpYaml(chartYaml)
               writeFile file: chartPath, text: newYaml
            }
         }
      }
      stage("commit updates") {
         when {
            expression {
               return hasChanges
            }
         }
         steps {
            dir ("${env.HELM_REPO_NAME}") {
               sh 'git config user.email "jenkins@ub"'
               sh 'git config user.name "Jenkins CI"'
               script {
                  sh (script: 'git commit -am="Commit form jenkins"', returnStatus: true, returnStdout: true)
                  sh 'git push'
               }
            }
         }
      }
   }
   post {
      success {
         script {
            if (hasChanges) {
               echo 'Build succeeded!'
               build job: "deploy-minikube-for-build",
               wait: false,
               parameters: [
               string(name: 'APPLICATION_NAME', value: "${params.APPLICATION_NAME}")
               ]
            } else {
               echo 'No dependencies bumped — skipping deployment.'
            }
         }
      }
      failure {
         echo 'Build failed.'
      }
      always {
         cleanWs()
      }
   }
}