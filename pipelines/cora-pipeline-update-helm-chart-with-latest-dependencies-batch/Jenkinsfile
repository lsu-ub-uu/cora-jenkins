pipeline {
   agent any
   
   parameters {
      string(
      name: 'APPLICATION_NAME',
      defaultValue: 'systemone',
      description: 'Name of the application that Helm chart will be updated'
      )
   }
   
   stages {
      stage("Determine Docker Artifacts") {
         steps {
            script {
               // Define allowed apps
               def allowedApps = ["systemone", "alvin", "diva"]
               if (!allowedApps.contains(params.APPLICATION_NAME)) {
                  error("Invalid APPLICATION_NAME '${params.APPLICATION_NAME}'. Must be one of: ${allowedApps.join(', ')}")
               }
               
               // Define Docker image lists
               def coraDockers = [
               "cora-docker-jsclient", "cora-docker-solr", "cora-docker-fedora",
               "cora-docker-rabbitmq", "cora-docker-iipimageserver", "cora-docker-binaryconverter",
               "cora-docker-idplogin", "cora-docker-login", "cora-docker-gatekeeper"
               ]
               def dockerMap = [
               "systemone": coraDockers + ["systemone-docker-postgresql", "systemone-docker", "systemone-docker-fitnesse"],
               "alvin"    : coraDockers + ["alvin-docker-postgresql", "alvin-docker-cora", "alvin-docker-gatekeeper", "alvin-cora-docker-fitnesse"],
               "diva"     : coraDockers + ["diva-docker-postgresql", "diva-cora-docker-fitnesse", "diva-docker-cora", "diva-docker-gatekeeper"]
               ]
               
               // Helper: Fetch latest release or fallback
               def getLatestVersion = {
                  groupId, artifactId, repoUrl ->
                  def groupPath = groupId.replace('.', '/')
                  def metadataUrl = "${repoUrl}/${groupPath}/${artifactId}/maven-metadata.xml"
                  echo "Fetching: ${metadataUrl}"
                  
                  def metadata = new XmlSlurper().parse(metadataUrl)
                  
                  //def metadata = new XmlSlurper().parse(metadataUrl.toURL())
                  def releaseVersion = metadata.versioning.release?.text()
                  
                  if (!releaseVersion) {
                     releaseVersion = "Not released yet"
                     echo "Warning: No <release> found for ${artifactId}, using default: ${releaseVersion}"
                  }
                  
                  return releaseVersion
               }
               
               // Helper: Use group and repo constants
               def getLatestVersionByArtifactId = {
                  artifactId ->
                  def groupId = 'se.uu.ub.cora'
                  def repoUrl = 'http://epc.ub.uu.se/nexus/repository/maven-public/'
                  def latestVersion = getLatestVersion(groupId, artifactId, repoUrl)
                  echo "Latest version of ${groupId}:${artifactId} is ${latestVersion}"
                  return latestVersion
               }
               
               // Get relevant docker list
               def dockerList = dockerMap.get(params.APPLICATION_NAME, coraDockers)
               echo "Updating Helm chart for ${params.APPLICATION_NAME}"
               echo "Dockers to step up: ${dockerList.join(', ')}"
               
               // Iterate and resolve versions
               dockerList.each {
                  artifactId ->
                  getLatestVersionByArtifactId(artifactId.trim())
               }
               
               // Map to hold artifact -> version
               def versionsMap = [:]
               dockerList.each {
                  artifactId ->
                  def version = getLatestVersionByArtifactId(artifactId)
                  versionsMap[artifactId] = version
               }
               
               // Save versionsMap to env for next stage or keep in variable
               // Here we keep it in current script scope as you update file in next step
               echo "Versions map: ${versionsMap}"
               
               // Save to file or pass around as needed
               writeFile file: 'versions.json', text: groovy.json.JsonOutput.toJson(versionsMap)
            }
            
         }
      }
      
      stage("checkout") {
         steps {
            script {
               def projectName = 'cora-deployment-onlyForTest'
               withCredentials([
               string(credentialsId: '9af4f5c5-4a09-4bbe-9436-2c102765d85b', variable: 'TOKEN'),
               string(credentialsId: '04bc33f5-abdd-4486-b43b-a5900f6fc080', variable: 'USERNAME')
               ]) {
                  sh "git clone https://${TOKEN}@github.com/lsu-ub-uu/${projectName}.git ${projectName}"
               }
            }
         }
      }
   }
}