// YAML parsing must be wrapped in @NonCPS to be compatible with Jenkins
import org.yaml.snakeyaml.Yaml
import org.yaml.snakeyaml.DumperOptions
@NonCPS
def parseYaml(String content) {
   def yaml = new org.yaml.snakeyaml.Yaml()
   return yaml.load(content)
}

@NonCPS
def dumpYaml(Object data) {
   def options = new org.yaml.snakeyaml.DumperOptions()
   options.setDefaultFlowStyle(org.yaml.snakeyaml.DumperOptions.FlowStyle.BLOCK)
   def yaml = new org.yaml.snakeyaml.Yaml(options)
   return yaml.dump(data)
}
pipeline {
   agent any
   
   parameters {
      string(
      name: 'APPLICATION_NAME',
      defaultValue: 'systemone',
      description: 'Name of the application that Helm chart will be updated'
      )
   }
   stages {
      stage("Determine Docker Artifacts") {
         steps {
            script {
               // Define allowed apps
               def allowedApps = ["systemone", "alvin", "diva"]
               if (!allowedApps.contains(params.APPLICATION_NAME)) {
                  error("Invalid APPLICATION_NAME '${params.APPLICATION_NAME}'. Must be one of: ${allowedApps.join(', ')}")
               }
               
               // Define Docker image lists
               def coraDockers = [
               "cora-docker-jsclient", "cora-docker-solr", "cora-docker-fedora",
               "cora-docker-rabbitmq", "cora-docker-iipimageserver", "cora-docker-binaryconverter",
               "cora-docker-idplogin", "cora-docker-login", "cora-docker-gatekeeper"
               ]
               def dockerMap = [
               "systemone": coraDockers + ["systemone-docker-postgresql", "systemone-docker", "systemone-docker-fitnesse"],
               "alvin"    : coraDockers + ["alvin-docker-postgresql", "alvin-docker-cora", "alvin-docker-gatekeeper", "alvin-cora-docker-fitnesse"],
               "diva"     : coraDockers + ["diva-docker-postgresql", "diva-cora-docker-fitnesse", "diva-docker-cora", "diva-docker-gatekeeper"]
               ]
               
               def getLatestVersion = {
                  groupId, artifactId, repoUrl ->
                  def groupPath = groupId.replace('.', '/')
                  def metadataUrl = "${repoUrl}/${groupPath}/${artifactId}/maven-metadata.xml"
                  echo "Fetching: ${metadataUrl}"
                  
                  def metadata = new XmlSlurper().parse(metadataUrl)
                  
                  //def metadata = new XmlSlurper().parse(metadataUrl.toURL())
                  def releaseVersion = metadata.versioning.release?.text()
                  
                  if (!releaseVersion) {
                     releaseVersion = "-"
                     echo "Warning: No <release> found for ${artifactId}, using default: ${releaseVersion}"
                  }
                  
                  return releaseVersion
               }
               
               def getLatestVersionByArtifactId = {
                  artifactId ->
                  def groupId = 'se.uu.ub.cora'
                  def repoUrl = 'http://epc.ub.uu.se/nexus/repository/maven-public/'
                  def latestVersion = getLatestVersion(groupId, artifactId, repoUrl)
                  echo "Latest version of ${groupId}:${artifactId} is ${latestVersion}"
                  return latestVersion
               }
               
               // Get relevant docker list
               def dockerList = dockerMap.get(params.APPLICATION_NAME, coraDockers)
               echo "Updating Helm chart for ${params.APPLICATION_NAME}"
               echo "Dockers to step up: ${dockerList.join(', ')}"
               
               // Iterate and resolve versions
               dockerList.each {
                  artifactId ->
                  getLatestVersionByArtifactId(artifactId.trim())
               }
               
               // Map to hold artifact -> version
               def versionsMap = [:]
               dockerList.each {
                  artifactId ->
                  def version = getLatestVersionByArtifactId(artifactId)
                  if(version != "-") {
                     versionsMap[artifactId] = version
                  }
               }
               
               // Save versionsMap to env for next stage or keep in variable
               // Here we keep it in current script scope as you update file in next step
               echo "Versions map: ${versionsMap}"
               
               // Save to file or pass around as needed
               writeFile file: 'versions.json', text: groovy.json.JsonOutput.toJson(versionsMap)
            }
            
         }
      }
      stage("checkout") {
         steps {
            script {
               def projectName = 'cora-deployment-onlyForTest'
               withCredentials([
               string(credentialsId: '9af4f5c5-4a09-4bbe-9436-2c102765d85b', variable: 'TOKEN'),
               string(credentialsId: '04bc33f5-abdd-4486-b43b-a5900f6fc080', variable: 'USERNAME')
               ]) {
                  def repoFolder = 'cora-deployment-onlyForTest'
                  sh "rm -rf ${repoFolder}"
                  sh "git clone https://${TOKEN}@github.com/lsu-ub-uu/${repoFolder}.git ${repoFolder}"
               }
            }
         }
      }
      stage('Update values.yaml') {
         steps {
            script {
               
               
               def readYamlFile = {
                  pathToFile ->
                  def yamlContent = readFile(pathToFile)
                  return parseYaml(yamlContent)
               }
               
               def readJsonFile = {
                  pathToFile ->
                  def jsonContent = readFile(pathToFile)
                  return new groovy.json.JsonSlurper().parseText(jsonContent)
               }
               //TODO Set APPLICATION_NAME to path
               def pathToValuesYaml = 'cora-deployment-onlyForTest/helm/systemone/values.yaml'
               def yamlData = readYamlFile(pathToValuesYaml)
               def versionsMap = readJsonFile('versions.json')
               
               versionsMap.each {
                  artifactId, version ->
                  // Find key by artifactId suffix
                  def key = null
                  if (artifactId.contains("solr")) key = "solr"
                  else if (artifactId.contains("idplogin")) key = "idplogin"
                  else if (artifactId.contains("rabbitmq")) key = "rabbitmq"
                  else if (artifactId.contains("fedora")) key = "fedora"
                  
                  if (key && yamlData?.dockers?.containsKey(key)) {
                     yamlData.dockers[key] = "${artifactId}:${version}".toString()
                  }
               }
               
               def newYamlStr = dumpYaml(yamlData)
               writeFile file: pathToValuesYaml, text: newYamlStr
            }
         }
      }
      stage("commit updates") {
         steps {
            dir ('cora-deployment-onlyForTest') {
               sh 'git config user.email "jenkins@ub"'
               sh 'git config user.name "Jenkins CI"'
               script {
                  sh (script: 'git commit -am="Commit form jenkins"', returnStatus: true, returnStdout: true)
                  sh 'git push'
               }
            }
         }
      }
      
   }
}