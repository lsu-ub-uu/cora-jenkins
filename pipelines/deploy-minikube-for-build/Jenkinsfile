pipeline {
   agent {
      label 'minikube'
   }
   
   environment {
      HELM_REPO_NAME = "cora-deployment"
   }
   
   parameters {
      string(
      name: 'APPLICATION_NAME',
      defaultValue: 'systemone',
      description: 'Name of the application that Helm chart will be updated'
      )
   }
   
   stages {
      stage('Initialize') {
         steps {
            script {
               // Set display name and description in Jenkins GUI
               currentBuild.displayName = "#${env.BUILD_NUMBER} - ${params.APPLICATION_NAME}"
               currentBuild.description = "Application Name: ${params.APPLICATION_NAME}"
               
               // Also log it in the console output
               echo ">>> APPLICATION_NAME: ${params.APPLICATION_NAME}"
            }
         }
      }
      
      stage('clone cora-deployment') {
         steps {
            script {
               withCredentials([
               string(credentialsId: '9af4f5c5-4a09-4bbe-9436-2c102765d85b', variable: 'TOKEN'),
               string(credentialsId: '04bc33f5-abdd-4486-b43b-a5900f6fc080', variable: 'USERNAME')
               ]) {
                  sh '''
                  rm -rf "$HELM_REPO_NAME"
                  git clone https://$USERNAME:$TOKEN@github.com/lsu-ub-uu/$HELM_REPO_NAME.git "$HELM_REPO_NAME"
                  '''
               }
            }
         }
      }
      
      stage('Run Script deploy-minikube-for-build') {
         steps {
            sh './helm/deploy-system-to-build.sh $APPLICATION_NAME'
         }
      }
      
      stage('Run Fitnesse tests') {
         steps {
            build job: "${params.APPLICATION_NAME}-minikube-fitnesse-test",
            wait: true,
            parameters: [
            string(name: 'APPLICATION_NAME', value: "${params.APPLICATION_NAME}")
            ]
         }
      }
      stage('Run Playwright test') {
         when {
            expression {
               return params.APPLICATION_NAME == 'diva'
            }
         }
         steps {
            build job: "diva-playwright-test",
            wait: true
         }
      }
      
      stage('Push helm') {
         steps {
            build job: "helm-package-upload-chart",
            wait: true,
            parameters: [
            string(name: 'APPLICATION_NAME', value: "${params.APPLICATION_NAME}")
            ]
         }
      }
      //TODO:  remove post actions for ${params.APPLICATION_NAME}-minikube-fitnesse-test, diva-playwright-test and helm-package-upload-chart
      //TODO:  remove mails from other jobbs
      post {
         success {
            echo 'Helm version passed all the tests!'
         }
         failure {
            script {
               def subject = "${params.APPLICATION_NAME} acceptance tests FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
               def body = "Check Jenkins for details: ${env.BUILD_URL}"
               
               if (params.APPLICATION_NAME == 'diva') {
                  mail to: "${env.CORA_MAIL_LIST},${env.DIVA_MAIL_LIST}",
                  subject: subject,
                  body: body
               } else {
                  mail to: "${env.CORA_MAIL_LIST}",
                  subject: subject,
                  body: body
               }
            }
         }
         always {
            cleanWs()
         }
      }
   }