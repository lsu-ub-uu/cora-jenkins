pipeline {
   agent {  label 'minikube' }
   environment {
      NAMESPACE = 'diva-build'
   }
   stages {
       stage('Get Pod Name') {
         steps {
               script {
                  def podName = sh(
                     script: "kubectl -n ${env.NAMESPACE} get pods -l app=diva-playwright -o jsonpath='{.items[0].metadata.name}'",
                     returnStdout: true
                  ).trim()
                  env.POD_NAME = podName
               }
               echo "Playwright pod name: ${env.POD_NAME}"
         }
      }
      stage('Run tests') {
         steps {
               sh """
                  kubectl -n ${env.NAMESPACE} exec ${env.POD_NAME} -- npm run test:ci
               """
         }
      }
      stage('Copy Results from Pod') {
         steps {
               sh """
                  rm -rf playwright-report
                  rm junit-report.xml
                  kubectl -n ${env.NAMESPACE} cp ${env.POD_NAME}:playwright-report/ playwright-report
                  kubectl -n ${env.NAMESPACE} cp ${env.POD_NAME}:junit-report.xml junit-report.xml
               """
         }
      }
   }
   post {
      always {
         junit('junit-report.xml')
         publishHTML([
            reportName: 'Playwright Report',
            reportDir: 'playwright-report',
            reportFiles: 'index.html',
            allowMissing: false,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportTitles: ''
         ])
      }
      success {
         echo 'DiVA Playwright tests passed!'
         build job: 'helm-package-upload-chart', wait: false, parameters: [
            string(name: 'APPLICATION_NAME', value: 'diva')
         ]
      }
      failure {
         echo 'DiVA Playwright tests failed!'
      }
   }
}