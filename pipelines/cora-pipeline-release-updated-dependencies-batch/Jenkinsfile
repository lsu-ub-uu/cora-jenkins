pipeline {
    agent any
    environment {
        projectsToUpdate = "";
    }
    stages {
        stage("user input"){
            steps{
                script {
                    /*def projectsToUpdate = input message: 'sdf', parameters: [text(defaultValue: '''cora-testrelease11
cora-testrelease111''', description: 'Project names to build', name: 'UB_PROJECT_NAMES')]
                    */
                    projectsToRelease = input message: 'Enter projects to force release', 
                    	parameters: [text(defaultValue: 'cora-testrelease1, cora-testrelease2', 
                    	description: 'Project names to force release of, these projects will be branched and released from master wheter they have updated dependencies or not (comma separated list)', 
                    	name: 'PROJECTS_TO_RELEASE', trim: true)]
                    projectsToUpdate = input message: 'Enter projects to update dependencies for', 
                    	parameters: [text(defaultValue: 'cora-testrelease1, cora-testrelease2', 
                    	description: 'Project names to update dependencies for and then branch and release from master IF new dependencies where found (comma separated list)', 
                    	name: 'PROJECTS_TO_UPDATE', trim: true)]
                    /*onlyCora = input message: 'Update only Cora dependencies', ok: 'Release!',
                            parameters: [choice(name: 'ONLY_CORA', choices: 'no\nyes', 
                            description: 'Which dependencies should be updated')]
                 	*/
                 	echo "Projects to release: $projectsToRelease"
                    echo "Projects to update: $projectsToUpdate"
                    //echo "Update only dependencies from Cora: $onlyCora"
                }
            }
        }
        
        stage("loop release"){
            steps{
                script {
                    def splittedprojectsToRelease = projectsToRelease.split(',')
                    splittedprojectsToRelease.each() {
                        def trimmed = it.trim()
                        def splittedTrimmed = trimmed.split(' ');
                        def project = splittedTrimmed[0].trim();
                        def branch = 'master';
                        if(splittedTrimmed.length > 1){
                            branch = splittedTrimmed[1].trim();
                        }
                        echo "project: $project"
                        echo "branch: $branch"
                        if(project && project.length() > 0){
	                    
	                        build job: 'cora-pipeline-release-updated-dependencies', 
	                            parameters: [string(name: 'UB_PROJECT_NAME', value: "$project"),
	                            	string(name: 'UB_BRANCH_NAME', value: "${branch}"),
	                            	string(name: 'FORCE_RELEASE', value: "1")]
                        }
                        echo "---------------------------------------------------"
                    }
                }   
            }
        }
        stage("loop updates"){
            steps{
                script {
                    echo "updates.."
                    def splittedprojectsToUpdate2 = projectsToUpdate.split(',')
                    splittedprojectsToUpdate2.each() {
                        def trimmed2 = it.trim()
                        def splittedTrimmed2 = trimmed2.split(' ');
                        def project2 = splittedTrimmed2[0].trim();
                        def branch2 = 'master';
                        if(splittedTrimmed2.length > 1){
                            branch2 = splittedTrimmed2[1].trim();
                        }
                        echo "Project:$project2"
                        echo "Branch:$branch2"
                        if(project2 && project2.length() > 0){
	                    	
	                        build job: 'cora-pipeline-release-updated-dependencies', 
	                            parameters: [string(name: 'UB_PROJECT_NAME', value: "$project2"),
	                            	string(name: 'UB_BRANCH_NAME', value: "${branch2}"),
	                           		string(name: 'FORCE_RELEASE', value: "0")]
                        }
                    }
                }   
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
} 