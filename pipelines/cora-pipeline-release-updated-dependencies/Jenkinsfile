pipeline {
   agent any
   environment {
      CHECKED_IN = "";
   }
   
   parameters {
      string( name: 'UB_PROJECT_NAME',
      defaultValue: 'cora-testrelease',
      description: 'Name of the project to build')
      string( name: 'UB_BRANCH_NAME',
      defaultValue: 'master',
      description: 'Name of the branch to build')
      string( name: 'FORCE_RELEASE',
      defaultValue: "0",
      description: 'Wheter the project has to be build even no dependencies chages have been found. Force release = 1, otherwise 0')
      string( name: 'BUILD_TYPE',
      defaultValue: 'maven',
      description: 'The type of artifact to build. The possible values are either maven: normal maven artifacts, or docker: maven artifacts that generate dockers')
   }
   tools {
      jdk 'Cora OpenJDK'
      maven 'Maven latest'
   }
   stages {
      stage("checkout") {
         steps {
            echo "Project: ${UB_PROJECT_NAME}"
            echo "FORCE_RELEASE: ${FORCE_RELEASE}"
            withCredentials([string(credentialsId: '9af4f5c5-4a09-4bbe-9436-2c102765d85b', variable: 'TOKEN'),string(credentialsId: '04bc33f5-abdd-4486-b43b-a5900f6fc080', variable: 'USERNAME')]) {
               sh 'git clone https://$TOKEN@github.com/lsu-ub-uu/$UB_PROJECT_NAME.git $UB_PROJECT_NAME -b $UB_BRANCH_NAME'
            }
         }
      }
      stage("update dependencies") {
         steps {
            sh 'mvn -f $UB_PROJECT_NAME versions:update-parent versions:update-properties -DgenerateBackupPoms=false -Dmaven.version.rules="https://raw.github.com/lsu-ub-uu/cora-jenkins/master/maven/maven-version-rules.xml"'
         }
      }
      stage("commit updates") {
         steps {
            dir ("$UB_PROJECT_NAME") {
               sh 'git config user.email "jenkins@ub"'
               sh 'git config user.name "Jenkins CI"'
               script {
                  CHECKED_IN = sh (script: 'git commit -am="Commit form jenkins"', returnStatus: true, returnStdout: true)
               }
            }
         }
      }
      stage("build new version") {
         when {
            expression {
               env.CHECKED_IN == "0" || params.FORCE_RELEASE == "1"
            }
         }
         steps {
            script {
               if (params.BUILD_TYPE == "docker") {
                  sh """mvn -f ${params.UB_PROJECT_NAME} -P docker-build clean deploy"""
               } else {
                  sh """mvn -f ${params.UB_PROJECT_NAME} -P sonar-cora clean deploy"""
               }
            }
         }
      }
      stage("push update to git") {
         when {
            expression {
               CHECKED_IN == 0
            }
         }
         steps {
            dir ("$UB_PROJECT_NAME") {
               sh 'git push'
            }
         }
      }
      stage("Getting version numbers and call branch release") {
         when {
            expression {
               CHECKED_IN == 0 || FORCE_RELEASE == "1"
            }
         }
         environment {
            GIT_AUTH = credentials('04bc33f5-abdd-4486-b43b-a5900f6fc080')
            MVN_MAJOR_VERSION = sh(script: "mvn -f $UB_PROJECT_NAME build-helper:parse-version help:evaluate -Dexpression=parsedVersion.majorVersion -q -DforceStdout", returnStdout: true)
            MVN_MINOR_VERSION = sh(script: "mvn -f $UB_PROJECT_NAME build-helper:parse-version help:evaluate -Dexpression=parsedVersion.minorVersion -q -DforceStdout", returnStdout: true)
            MVN_NEXT_MAJOR_VERSION = sh(script: "mvn -f $UB_PROJECT_NAME build-helper:parse-version help:evaluate -Dexpression=parsedVersion.nextMajorVersion -q -DforceStdout", returnStdout: true)
            MVN_NEXT_MINOR_VERSION = sh(script: "mvn -f $UB_PROJECT_NAME build-helper:parse-version help:evaluate -Dexpression=parsedVersion.nextMinorVersion -q -DforceStdout", returnStdout: true)
            BRANCH_VERSION="$MVN_MAJOR_VERSION.$MVN_MINOR_VERSION"
            DEV_BRANCH_VERSION="$MVN_MAJOR_VERSION.$MVN_NEXT_MINOR_VERSION"
         }
         steps {
            echo "Current version is ${env.MVN_MAJOR_VERSION}.${env.MVN_MINOR_VERSION}"
            
            echo "Branch version:$BRANCH_VERSION"
            echo "Dev branch version:$DEV_BRANCH_VERSION"
            
            build job: 'cora-branch-release', parameters: [
            [$class: 'StringParameterValue', name: 'UB_PROJECT_NAME', value: "${UB_PROJECT_NAME}" ],
            [$class: 'StringParameterValue', name: 'UB_BRANCH_VERSION', value: "${BRANCH_VERSION}" ],
            [$class: 'StringParameterValue', name: 'UB_DEV_BRANCH_VERSION', value: "${DEV_BRANCH_VERSION}" ],
            [$class: 'StringParameterValue', name: 'BUILD_TYPE', value: "${BUILD_TYPE}" ]
            ]
         }
      }
      stage("nothing to release") {
         when {
            expression {
               CHECKED_IN == 1 && FORCE_RELEASE == "0"
            }
         }
         steps {
            echo "No dependencies to update, no release created"
         }
      }
   }
   post {
      always {
         cleanWs()
      }
   }
}