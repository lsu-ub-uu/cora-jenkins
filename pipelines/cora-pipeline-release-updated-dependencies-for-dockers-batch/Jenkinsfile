/*
This pipeline manages parallel releases of multiple Docker projects.

Stages:
1. Print Dockers to Step Up – logs the list of Docker projects to process.
2. Loop Step Up – triggers parallel builds of 'cora-pipeline-release-updated-dependencies' for each Docker project with FORCE_RELEASE and build type 'docker'.

Post actions:
- On success: triggers Helm chart update asynchronously.
- On failure: logs build failure.
- Always: cleans workspace.
*/


pipeline {
   agent any
   
   parameters {
      string(name: 'FORCE_RELEASE',
      defaultValue: "0",
      description: 'Whether the project has to be built even if no dependency changes were found. Use 1 to force release, otherwise 0.')
      
      text(name: 'DOCKERS_TO_RELEASE',
      defaultValue: '''cora-docker-jsclient,cora-docker-solr,cora-docker-fedora,cora-docker-rabbitmq,
      cora-docker-iipimageserver,cora-docker-binaryconverter,systemone-docker-postgresql,alvin-docker-postgresql,
      diva-docker-postgresql,cora-docker-idplogin,cora-docker-login,cora-docker-gatekeeper,systemone-docker,
      systemone-docker-fitnesse,alvin-docker-cora,alvin-docker-gatekeeper,alvin-cora-docker-fitnesse,
      diva-cora-docker-fitnesse,diva-docker-cora,diva-docker-gatekeeper,diva-docker-divaclient''',
      description: 'Comma-separated list of dockers to update after release.')
   }
   
   stages {
      stage("Print Dockers to Step Up") {
         steps {
            script {
               def dockersToStepUp = params.DOCKERS_TO_RELEASE.tokenize(',').collect {
                  it.trim()
               }
               echo "Dockers to step up: ${dockersToStepUp.join(', ')}"
            }
         }
      }
      
      stage("Loop Step Up") {
         steps {
            script {
               def dockersToStepUp = params.DOCKERS_TO_RELEASE.tokenize(',').collect {
                  it.trim()
               }
               def parallelJobs = [:]
               
               dockersToStepUp.each {
                  dockerItem ->
                  def splitted = dockerItem.split(' ')
                  def project = splitted[0].trim()
                  
                  if (project) {
                     def projectCopy = project
                     
                     parallelJobs["Step up ${projectCopy}"] = {
                        build job: 'cora-pipeline-release-updated-dependencies',
                        parameters: [
                        string(name: 'UB_PROJECT_NAME', value: projectCopy),
                        string(name: 'BRANCH_NAME', value: "master"),
                        string(name: 'FORCE_RELEASE', value: "${params.FORCE_RELEASE}"),
                        string(name: 'BUILD_TYPE', value: "docker")
                        ]
                     }
                  }
               }
               
               if (parallelJobs.isEmpty()) {
                  echo "No valid projects to step up."
               } else {
                  parallel parallelJobs
               }
            }
         }
      }
   }
   
   post {
      success {
         script {
            def apps = ['systemone', 'alvin', 'diva']
            apps.each {
               appName ->
               echo "Building for ${appName} succeeded!"
               build job: 'cora-pipeline-update-helm-chart-with-latest-dependencies-batch',
               wait: false,
               parameters: [string(name: 'APPLICATION_NAME', value: appName)]
            }
         }
      }
      failure {
         echo 'Build failed.'
      }
      always {
         cleanWs()
      }
   }
}